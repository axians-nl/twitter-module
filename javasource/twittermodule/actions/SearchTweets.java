// This file was generated by Mendix Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package twittermodule.actions;

import java.util.ArrayList;
import java.util.List;
import com.mendix.core.Core;
import com.mendix.logging.ILogNode;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import twitter4j.HashtagEntity;
import twitter4j.QueryResult;
import twitter4j.Status;
import twitter4j.URLEntity;
import twitter4j.UserMentionEntity;
import twittermodule.impl.Constants;
import twittermodule.impl.Credentials;
import twittermodule.impl.TwitterModule;
import twittermodule.proxies.Tweet;
import twittermodule.proxies.User;
import com.mendix.systemwideinterfaces.core.IMendixObject;

/**
 * Implements the Standard Search Tweets API of Twitter. See https://developer.twitter.com/en/docs/tweets/search/api-reference/get-search-tweets.html
 */
public class SearchTweets extends CustomJavaAction<java.util.List<IMendixObject>>
{
	private java.lang.String consumerKey;
	private java.lang.String consumerKeySecret;
	private java.lang.String accessToken;
	private java.lang.String accessTokenSecret;
	private twittermodule.proxies.ResultType resultType;
	private java.lang.Long count;
	private java.util.Date until;
	private java.lang.Long sinceId;
	private java.lang.Long maxId;
	private java.lang.String query;

	public SearchTweets(IContext context, java.lang.String consumerKey, java.lang.String consumerKeySecret, java.lang.String accessToken, java.lang.String accessTokenSecret, java.lang.String resultType, java.lang.Long count, java.util.Date until, java.lang.Long sinceId, java.lang.Long maxId, java.lang.String query)
	{
		super(context);
		this.consumerKey = consumerKey;
		this.consumerKeySecret = consumerKeySecret;
		this.accessToken = accessToken;
		this.accessTokenSecret = accessTokenSecret;
		this.resultType = resultType == null ? null : twittermodule.proxies.ResultType.valueOf(resultType);
		this.count = count;
		this.until = until;
		this.sinceId = sinceId;
		this.maxId = maxId;
		this.query = query;
	}

	@Override
	public java.util.List<IMendixObject> executeAction() throws Exception
	{
		// BEGIN USER CODE
		Credentials credentials = new Credentials(this.consumerKey, this.consumerKeySecret,
				this.accessToken, this.accessTokenSecret);
		
		TwitterModule twitter = new TwitterModule();
		
		// Initialize logging.
		ILogNode logger = Core.getLogger(SearchTweets.class.getName());
		twitter.setLogger(logger);
		
		logger.info("searchTweets - begin");
		
		// Execute the search.
		QueryResult result = twitter.searchTweets(credentials, this.count, this.until, 
				this.sinceId, this.maxId, this.resultType, this.query);
		
		// Convert the QueryResult to a Mendix List<Tweet>.
		List<IMendixObject> tweets = new ArrayList<>();
		if (result.getTweets() != null) {
			for(Status status : result.getTweets()) {
				
				// Get the user.
				User user = new User(getContext());
				user.setName(status.getUser().getName());
				user.setScreenName(status.getUser().getScreenName());
				user.setProfileImageURL(status.getUser().getProfileImageURL());
				user.setProfileURL(Constants.TWITTER_BASE_URL + status.getUser().getScreenName());
				
				// Get the tweet.
				Tweet tweet = new Tweet(getContext());
				tweet.setTweetId(status.getId());
				tweet.setCreatedAt(status.getCreatedAt());
				tweet.setTextPlain(status.getText());
				tweet.setSource(status.getSource());
				tweet.setFavoriteCount(new Long(status.getFavoriteCount()));
				tweet.setRetweetCount(new Long(status.getRetweetCount()));
				tweet.setTweetUser(user);
				
				// Apply formatting.
				String textFormatted = status.getText();
				textFormatted = formatHashtags(textFormatted, status.getHashtagEntities());
				textFormatted = formatMentions(textFormatted, status.getUserMentionEntities());
				textFormatted = formatURLs(textFormatted, status.getURLEntities());
				tweet.setTextFormatted(textFormatted);
				
				tweets.add(tweet.getMendixObject());
			}
		}
		
		logger.info("searchTweets - end");
		
		return tweets;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@Override
	public java.lang.String toString()
	{
		return "SearchTweets";
	}

	// BEGIN EXTRA CODE
	
	private String formatMentions(String text, UserMentionEntity[] mentions) {
		if (text == null || mentions == null) {
			return text;
		}
		
		for(UserMentionEntity mention : mentions) {
			String profileUrl = Constants.TWITTER_BASE_URL + mention.getScreenName();
			String m = "@" + mention.getText();
			text = text.replaceAll(m, String.format(
					Constants.TWITTER_MENTION_TEMPLATE, profileUrl, m));
		}
		
		return text;
	}
	
	private String formatHashtags(String text, HashtagEntity[] hashtags) {
		if (text == null || hashtags == null) {
			return text;
		}

		for(HashtagEntity hashtag : hashtags) {
			String tag = "#" + hashtag.getText();
			text = text.replaceAll(tag, String.format(
					Constants.TWITTER_HASHTAG_TEMPLATE, tag));
		}
		
		return text;
	}
	
	private String formatURLs(String text, URLEntity[] urls) {
		if (text == null || urls == null) {
			return text;
		}
		
		for(URLEntity url : urls) {
			text = text.replaceAll(url.getText(), String.format(
					Constants.TWITTER_URL_TEMPLATE, url.getText()));
		}
		
		return text;
	}
	
	// END EXTRA CODE
}
